input {
	file {
		path => ['/var/log/apache2/access.log', '/var/log/apache2/error.log']
		tags => ['openstack', 'horizon']
		start_position => "beginning"
		type => "horizon"
		codec => multiline {
			pattern => "^.*tid %{NUMBER}\](?: Traceback)|(?:  File)|(?:     ).*$"
			what => "previous"
		}
	}

}

filter {
	mutate {
		gsub => ['path', "/.+/", ""]
	}

	if [path] == "access.log" {
		grok {
			match => { "message" => "(?m)^%{IPORHOST:sip} - - \[%{NOTSPACE:logdate} %{INT}\] \"%{NOTSPACE:http_method} %{NOTSPACE:http_url} HTTP/%{NOTSPACE:http_version}\" %{NUMBER:http_response_code} %{NUMBER:http_request_bytes:int} %{QS:http_refer} %{QS:http_agent}"}
			add_field => ["api", "horizon"]
			add_tag => ["apimetrics"]
		}

		date {
			match => ["logdate", "dd/MMM/yyyy:HH:mm:ss"]
		}
	} 
	if [path] == "error.log" {
		grok {
			match => {
				"message" => "(?m)^\[%{DATA:logdate}\] \[%{NOTSPACE:module}?:%{NOTSPACE:loglevel}\] \[pid %{NUMBER:pid}:tid %{NUMBER:tid}\] %{GREEDYDATA:message}"
			}
			overwrite => "message"
		}
		mutate {
			uppercase => ["loglevel"]
		}

		date {
			match => ["logdate", "EEE MMM dd HH:mm:ss.SSSSSS yyyy"]
		}

		if [message] =~ "^Login " {
			grok {
				match => {"message" => "^Login %{NOTSPACE:log_action} for user \"%{DATA:user}\"."}
			}
		}
	}
}

output {
	redis {
		data_type => "list"
		key => "dev-openstack-liberty"
		host => "elk-redis-server"
	}
}
