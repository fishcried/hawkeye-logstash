input {
	file {
		path => ['/var/log/libvirt/libvirtd.log']
		tags => ['openstack', 'libvirt']
		start_position => "beginning"
		type => "libvirt"
		codec => multiline {
			pattern => "^%{DATA:logdate}\+0000: %{NUMBER}: %{NOTSPACE:loglevel} : %{NOTSPACE:module}:%{NUMBER}"
			negate => true
			what => "previous"
		}
	}

	file {
		path => ['/var/log/keystone/keystone*.log']
		tags => ['openstack','keystone']
		start_position => "beginning"
		type => "keystone"
		codec => multiline {
			pattern => "^%{OPENSTACK_TRACE_BLOCK}"
			what => "previous"
		}
	}

	file {
		path => ['/var/log/rabbitmq/rabbit*.log']
		exclude => ['/var/log/rabbitmq/rabbit*-sasl.log']
		tags => ['openstack', 'rabbitmq']
		start_position => "beginning"
		type => "rabbitmq"
		codec => multiline {
			pattern => "^=.+===="
			negate => "true"
			what => "previous"
		}
	}

	file {
		path => ['/var/log/apache2/error.log']
		tags => ['openstack', 'horizon']
		start_position => "beginning"
		type => "horizon"
		codec => multiline {
			pattern => "^.*tid %{NUMBER}\](?: Traceback)|(?:  File)|(?:     ).*$"
			what => "previous"
		}
	}

	file {
		path => ['/var/log/apache2/access.log']
		tags => ['openstack', 'horizon']
		start_position => "beginning"
		type => "horizon"
	}

	file {
		path => ['/var/log/ceilometer/ceilometer-*.log']
		tags => ['openstack', 'ceilometer']
		start_position => "beginning"
		type => "ceilometer"
		codec => multiline {
			pattern => "^%{OPENSTACK_TRACE_BLOCK}"
			what => "previous"
		}
	}
	file {
		path => ['/var/log/cinder/cinder-*.log']
		tags => ['openstack', 'cinder']
		type => "cinder"
		codec => multiline {
			pattern => "^%{OPENSTACK_TRACE_BLOCK}"
			what => "previous"
		}
	}

	file {
		path => ['/var/log/nova/nova-*.log']
		tags => ['openstack', 'nova']
		start_position => "beginning"
		type => "nova"
		codec => multiline {
			pattern => "^%{OPENSTACK_TRACE_BLOCK}"
			what => "previous"
		}
	}

	file {
		path => ['/var/log/glance/glance-*.log']
		tags => ['openstack', 'glance']
		start_position => "beginning"
		type => "glance"
		codec => multiline {
			pattern => "^%{OPENSTACK_TRACE_BLOCK}"
			what => "previous"
		}
	}

	file {
		path => ['/var/log/neutron/*agent.log', '/var/log/neutron/neutron*.log']
		tags => ['openstack', 'neutron']
		type => "neutron"
		codec => multiline {
			pattern => "^%{OPENSTACK_TRACE_BLOCK}|%{OPENSTACK_NEUTRON_CMD_BLOCK}"
			what => "previous"
		}
	}

	file {
		path => ['/var/log/auth.log']
		tags => ['system', 'auth']
		type => "auth"
		start_position => "beginning"
	}

}

filter {
	# handle path
	mutate {
		gsub => ['path', "/.+/", ""]
	}

	# general parse
	if "horizon" in [tags] {
		if [path] == "access.log" {
			grok {
				match => { "message" => "(?m)^%{IPORHOST:sip} - - \[%{NOTSPACE:logdate} %{INT}\] \"%{NOTSPACE:http_method} %{NOTSPACE:http_url} HTTP/%{NOTSPACE:http_version}\" %{NUMBER:http_response_code} %{NUMBER:http_request_bytes:int} %{QS:http_refer} %{QS:http_agent}"}
				add_field => ["api", "horizon"]
				add_field => ["loglevel", "INFO"]
				add_tag => ["apimetrics"]
			}
		} else if [path] == "error.log" {
			grok {
				match => {
					"message" => "(?m)^\[%{DATA:logdate}\] \[%{NOTSPACE:module}?:%{NOTSPACE:loglevel}\] \[%{DATA}\] %{GREEDYDATA:message}"
				}
				overwrite => "message"
			}
			mutate {
				uppercase => ["loglevel"]
			}
		}
	} else if "rabbitmq" in [tags] {
		grok {
			match => {
				"message" => "(?m)^=%{LOGLEVEL:loglevel} REPORT==== %{DATA:logdate} ===\n%{GREEDYDATA:message}"
			}
			overwrite => ["message"]
		}
		grok {
			match => { 
				"message" => "(?m)^%{NOTSPACE:action} AMQP connection %{NOTSPACE} \(%{IP:sip}:%{POSINT:sport} -> %{IP:dip}:%{POSINT:dip}\)(?::\n%{NOTSPACE:error_type})?"
			}
		}
	} else if "libvirtd" in [tags] {
		grok {
			match => {
				"message" => "(?m)^%{DATA:logdate}\+0000: %{NUMBER}: %{NOTSPACE:loglevel} : %{NOTSPACE:module}:%{NUMBER} : %{GREEDYDATA:message}"
			}
			overwrite => ["message"]
		}
	} else if "auth" in [tags] {
		grok {
			match => { "message" => "(?<logdate>%{MONTH}%{SPACE}%{MONTHDAY}%{SPACE}%{HOUR}:%{MINUTE}:%{SECOND}) %{NOTSPACE:host} %{DATA:module}(?:\[%{NUMBER}\])?: %{GREEDYDATA:message}"}
			overwrite => ["message"]
		}
	} else {
		grok {
			match => { "message" => "%{OPENSTACK_NORMAL}%{GREEDYDATA:message}?" }
			overwrite => ["message"]
		}
	}


	# update date
	date {
		match => ["logdate", "yyyy-MM-dd HH:mm:ss.SSS",
							 "EEE MMM dd HH:mm:ss.SSSSSS yyyy",
							 "dd/MMM/yyyy:HH:mm:ss",
							 "dd-MMM-yyyy::HH:mm:ss",
							 "MMM dd HH:mm:ss",
							 "MMM  dd HH:mm:ss",
							 "yyyy-MM-dd HH:mm:ss.SSS"  ]
	}
	
	# mark level
	if [loglevel] in ["WARNING","WARN","TRACE", "ERROR"] {
		mutate {
			add_tag => ["something_wrong"]
		}
	}

	# details
	# nova
	if [module] == "nova.osapi_compute.wsgi.server" {
		grok {
			match => { "message" => "%{OPENSTACK_NOVA_API}" }
			add_field => ["api", "nova"]
			add_tag => ["apimetrics"]
		}
	}

	# neutron
	if [path] == "neutron-server.log" {
		if [module] == "neutron.wsgi" {
			if "accepted" not in [message] and "timed out" not in [message] {
				grok {
					match => { "message" => "%{OPENSTACK_NEUTRON_API}" }
					add_field => ["api", "neutron"]
					add_tag => ["apimetrics"]
				}
			}
		}
	}
	
	if [path] == "glance-api.log" {
		if [module] == "eventlet.wsgi.server" {
			grok {
				match => { "message" => "%{OPENSTACK_EVENTLET_WSGI}" }
				add_field => ["api", "glance"]
				add_tag => ["apimetrics"]
			}
		}
	}

	if [path] == "cinder-api.log" {
		if [module] == "eventlet.wsgi.server" {
			grok {
				match => { "message" => "%{OPENSTACK_EVENTLET_WSGI}" }
				add_field => ["api", "cinder"]
				add_tag => ["apimetrics"]
			}
		}
	}
	if [path] == "keystone.log" {
		if [module] == "eventlet.wsgi.server" {
			grok {
			match => { "message" => "%{OPENSTACK_EVENTLET_WSGI}" }
			add_field => ["api", "keystone"]
			add_tag => ["apimetrics"]
			}
		}
	}

	if [path] == "ceilometer-api.log" {
		if [module] == "werkzeug" {
			if "Running on" not in [message] {
				grok {
					match => {
						message => "%{OPENSTACK_CEILOMETER_API}"
						add_field => ["api", "ceilometer"]
						add_tag => ["apimetrics"]
					}

				}
			}
		} 

	}
	if [module] == "oslo.messaging._drivers.impl_rabbit" {
		if "Errno 32" in [message] {
			mutate {
				add_field => ["error_type", "MQ-broken-pipe"]
			}
		}
		if "Errno 104" in [message] {
			mutate {
				add_field => ["error_type", "MQ-peer-rest"]
			}
		}
		if "Errno 104" in [message] {
			mutate {
				add_field => ["error_type", "MQ-connrefused"]
			}
		}
	}

	if [path] == "error.log" {
		if [message] =~ "^Login " {
			grok {
				match => {"message" => "^Login %{NOTSPACE:log_action} for user \"%{DATA:user}\"."}
			}
		}
	}

	if [path] == "auth.log" {
		if [module] == "useradd" {
			if "new user: name=" in [message] {
				grok {
					match => {"message" => "^new user: name=%{NOTSPACE:user} .*"}
					add_field => ["log_action", "add_user"]
				}
			}

		}
		if [module] == "usermod" {
			if "change user" in [message] {
				grok {
					match => {"message" => "change user '%{NOTSPACE:user}' %{NOTSPACE:action}"}
					add_field => ["log_action", "change_%{@action}"]
				}
			}
		}
		if [module] == "sshd" {
			if [message] =~ "^Failed password for" {
				grok {
					match => {"message" => "Failed password for %{NOTSPACE:user} from %{NOTSPACE:rhost} .*"}
					add_field => ["log_action", "ssh_failed"]
				}
			}
			if [message] =~ "^Accepted" {
				grok {
					match => {"message" => "^Accepted %{NOTSPACE} for %{NOTSPACE:user} from %{NOTSPACE:rhost} .*$"}
					add_field => ["log_action", "ssh_sucessful"]
				}
			}
		}

	}

}

output {
	redis {
		data_type => "list"
		key => "dev-openstack-liberty"
		host => "elk-redis-server"
	}
}
